{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Basic If-Else Statements:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Write a Python program to check if a given number is positive or negative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 is positive\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter Number : \"))\n",
    "\n",
    "if num >= 0:\n",
    "    print(f\"{num} is positive\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num} is negetive\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Create a program that determines if a person is eligible to vote based on their age."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are 5 years old and not eligible for vote\n"
     ]
    }
   ],
   "source": [
    "age = int (input(\"Enter your age : \"))\n",
    "\n",
    "if age >= 18:\n",
    "    print(f\"You are {age} years old and eligible for vote\")\n",
    "\n",
    "else:\n",
    "    print(f\"You are {age} years old and not eligible for vote\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Develop a program to find the maximum of two numbers using if-else statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 is maximum than 20\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st number : \"))\n",
    "num2 = int(input(\"Enter 2nd number : \"))\n",
    "\n",
    "if num1>num2 :\n",
    "    print(f\"{num1} is maximum than {num2}\")\n",
    "\n",
    "elif num1==num2:\n",
    "    print(f\"{num1} and {num2} are same\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num2} is maximum than {num1}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Write a Python script to classify a given year as a leap year or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024 is a leap year\n"
     ]
    }
   ],
   "source": [
    "year = int(input(\"Enter year : \"))\n",
    "\n",
    "if year % 4 == 0:\n",
    "\n",
    "    if year % 100 == 0:\n",
    "\n",
    "        if year % 400 == 0:\n",
    "            print(f\"{year} is a leap year\")\n",
    "\n",
    "        else:\n",
    "            print(f\"{year} is not a leap year\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{year} is a leap year\")\n",
    "\n",
    "else:\n",
    "    print(f\"{year} is not a leap year\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Create a program that checks whether a character is a vowel or a consonant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "g is a consonant\n"
     ]
    }
   ],
   "source": [
    "string = input(\"Enter character \")\n",
    "\n",
    "if string in \"aeiou\":\n",
    "    print(f\"{string} is a vowel\")\n",
    "\n",
    "else:\n",
    "    print(f\"{string} is a consonant\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Implement a program to determine whether a given number is even or odd."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51 is odd\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a Number : \"))\n",
    "\n",
    "if num % 2 == 0:\n",
    "    print(f\"{num} is even\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num} is odd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. Write a Python function to calculate the absolute value of a number without using the `abs()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "absolute value of -20 is 20\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter Number : \"))\n",
    "\n",
    "if num >= 0:\n",
    "    print(f\"absolute value of {num} is {num}\")\n",
    "\n",
    "else:\n",
    "    print(f\"absolute value of {num} is {-num}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. Develop a program that determines the largest of three given numbers using if-else statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 is greatest than 7 and 4\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st Number : \"))\n",
    "num2 = int(input(\"Enter 2nd Number : \"))\n",
    "num3 = int(input(\"Enter 3rd Number : \"))\n",
    "\n",
    "if num1 > num2 and num1 > num3:\n",
    "    print(f\"{num1} is greatest than {num2} and {num3}\")\n",
    "\n",
    "elif num2 > num1 and num2 > num3:\n",
    "    print(f\"{num2} is greatest than {num1} and {num3}\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num3} is greatest than {num1} and {num2}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. Create a program that checks if a given string is a palindrome."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This 'level' is a palindrome\n"
     ]
    }
   ],
   "source": [
    "string = input(\"Enter a string : \")\n",
    "\n",
    "if string == string[::-1]:\n",
    "    print(f\"This '{string}' is a palindrome\")\n",
    "\n",
    "else:\n",
    "    print(f\"This '{string}' is not a palindrome\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10. Write a Python program to calculate the grade based on a student's score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grade E for scoring 10\n"
     ]
    }
   ],
   "source": [
    "score = int(input(\"Enter score out of 100 : \"))\n",
    "\n",
    "if score > 90:\n",
    "    print(f\"grade A+ for scoring {score}\")\n",
    "\n",
    "elif score <= 90 and score > 70:\n",
    "    print(f\"grade A for scoring {score}\")\n",
    "\n",
    "elif score <= 70 and score > 50:\n",
    "    print(f\"grade B for scoring {score}\")\n",
    "\n",
    "elif score <= 50 and score > 30:\n",
    "    print(f\"grade C for scoring {score}\")\n",
    "\n",
    "elif score <= 30 and score > 10:\n",
    "    print(f\"grade D for scoring {score}\")\n",
    "\n",
    "elif score <= 10 and score > 0:\n",
    "    print(f\"grade E for scoring {score}\")\n",
    "\n",
    "else:\n",
    "    print(f\"{score} is not a valid score\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nested If-Else Statements:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11. Write a program to find the largest among three numbers using nested if-else statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22 is greater than 20 and 2\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st Number : \"))\n",
    "num2 = int(input(\"Enter 2nd Number : \"))\n",
    "num3 = int(input(\"Enter 3rd Number : \"))\n",
    "\n",
    "if num1>num2:\n",
    "    if num1> num3:\n",
    "        print(f\"{num1} is greater tham {num2} and {num3}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{num3} is greater than {num1} and {num2}\")\n",
    "\n",
    "else:\n",
    "    if num2>num3:\n",
    "        print(f\"{num2} is greater than {num1} and {num2}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{num3} is greater than {num1} and {num2}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "12. Implement a program to determine if a triangle is equilateral, isosceles, or scalene."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "triangle is Scalene Triangle with sides 5 , 6 and 7\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st side : \"))\n",
    "num2 = int(input(\"Enter 2nd side : \"))\n",
    "num3 = int(input(\"Enter 3rd side : \"))\n",
    "\n",
    "if num1 == num2:\n",
    "    if num2 == num3:\n",
    "        print(f\"triangle is Equilateral Triangle with sides {num1} , {num2} and {num3}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"triangle is Isosceles Triangle with sides {num1} , {num2} and {num3}\")\n",
    "\n",
    "else:\n",
    "    if num2 == num3 :\n",
    "        print(f\"triangle is Isosceles Triangle with sides {num1} , {num2} and {num3}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"triangle is Scalene Triangle with sides {num1} , {num2} and {num3}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13. Develop a program that checks if a year is a leap year and also if it is a century year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2100 is a century\n",
      "2100 is not a leap year\n"
     ]
    }
   ],
   "source": [
    "year = int(input(\"Enter year : \"))\n",
    "\n",
    "if year % 100 == 0 :\n",
    "    print(f\"{year} is a century\")\n",
    "else:\n",
    "    print(f\"{year} is not a century\")\n",
    "\n",
    "if year % 4 == 0:\n",
    "\n",
    "    if year % 100 == 0:\n",
    "\n",
    "        if year % 400 == 0:\n",
    "            print(f\"{year} is a leap year\")\n",
    "\n",
    "        else:\n",
    "            print(f\"{year} is not a leap year\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{year} is a leap year\")\n",
    "\n",
    "else:\n",
    "    print(f\"{year} is not a leap year\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "14. Write a Python script to determine if a number is positive, negative, or zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-50 is negetive\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a Number : \"))\n",
    "if num >= 0:\n",
    "    if num == 0:\n",
    "        print(f\"{num} is zero\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{num} is positive\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num} is negetive\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "15. Create a program to check if a person is a teenager (between 13 and 19 years old)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Person is not a teenager as 36 years old\n"
     ]
    }
   ],
   "source": [
    "age = int(input(\"Enter age : \"))\n",
    "\n",
    "if age>12 and age<20:\n",
    "    print(f\"Person is a teenager as {age} years old\")\n",
    "\n",
    "else:\n",
    "    print(f\"Person is not a teenager as {age} years old\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "16. Develop a program that determines the type of angle based on its measure (acute, obtuse, or right)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "angle is acute as side is 40\n"
     ]
    }
   ],
   "source": [
    "angle1 = int(input(\"Enter angle of side 1 (in degree) : \"))\n",
    "angle2 = int(input(\"Enter angle of side 2 (in degree) : \"))\n",
    "angle3 = int(input(\"Enter angle of side 3 (in degree) : \"))\n",
    "\n",
    "\n",
    "if angle1>=90 or angle2>=90 or angle3>=90:\n",
    "    if angle1==90 or angle2==90 or angle3==90:\n",
    "        print(f\"angle is right as side is {max(angle1,angle2,angle3)}\")\n",
    "    \n",
    "    else:\n",
    "        print(f\"angle is obtuse as side is {max(angle1,angle2,angle3)}\")\n",
    "        \n",
    "else:\n",
    "    print(f\"angle is acute as side is {max(angle1,angle2,angle3)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "17. Write a Python program to calculate the roots of a quadratic equation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "quadratic equation format (ax² + bx + c = 0)\n",
      "quadratic equation is (2x² + 3x + 1 = 0)\n",
      "discriminant is 1\n",
      "discriminant is positive , Roots are -0.5 and -1.0\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "print(\"quadratic equation format (ax\\u00b2 + bx + c = 0)\")\n",
    "a = int(input(\"Enter value of a\"))\n",
    "b = int(input(\"Enter value of b\"))\n",
    "c = int(input(\"Enter value of c\"))\n",
    "\n",
    "print(f\"quadratic equation is ({a}x\\u00b2 + {b}x + {c} = 0)\")\n",
    "\n",
    "\n",
    "discriminant = b**2 - 4*a*c\n",
    "\n",
    "print(\"discriminant is\", discriminant)\n",
    "\n",
    "\n",
    "if discriminant <0:\n",
    "    print(\"discriminant is negetive , Roots are Complex\")\n",
    "\n",
    "else:\n",
    "    if discriminant == 0:\n",
    "        print(f\"discriminant is zero , Root is {-b/(2*a)}\")\n",
    "\n",
    "    else:\n",
    "        print(\"discriminant is positive , \",end =\"\")\n",
    "\n",
    "\n",
    "        discriminant_root = math.sqrt(discriminant)\n",
    "        x1 = ((- b + discriminant_root)/(2*a))\n",
    "        x2 = ((- b - discriminant_root)/(2*a))\n",
    "\n",
    "        print(f\"Roots are {x1} and {x2}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "18. Implement a program to determine the day of the week based on a user-provided number (1 for Monday, 2 for Tuesday, etc.)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the day 4 of the week is Thursday\n"
     ]
    }
   ],
   "source": [
    "day = int(input(\"Enter day of a Week (1 - 7): \"))\n",
    "\n",
    "days = ['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday']\n",
    "\n",
    "day_week = days[day-1]\n",
    "\n",
    "print(f\"the day {day} of the week is {day_week}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "19. Create a program that determines if a year is a leap year and also if it is evenly divisible by 400."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020 is a leap year\n",
      "2020 is not divisible by 400\n"
     ]
    }
   ],
   "source": [
    "year = int(input(\"Enter year : \"))\n",
    "\n",
    "if year % 4 == 0:\n",
    "\n",
    "    if year % 100 == 0:\n",
    "\n",
    "        if year % 400 == 0:\n",
    "            print(f\"{year} is a leap year\")\n",
    "            print(f\"{year} is evenly divisible by 400\")\n",
    "        else:\n",
    "            print(f\"{year} is not a leap year\")\n",
    "            print(f\"{year} is not divisible by 400\")\n",
    "    else:\n",
    "        print(f\"{year} is a leap year\")\n",
    "        print(f\"{year} is not divisible by 400\")\n",
    "else:\n",
    "    print(f\"{year} is not a leap year\")\n",
    "    print(f\"{year} is not divisible by 400\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "20. Develop a program that checks if a given number is prime or not using nested if-else statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23 is a prime number\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a number : \"))\n",
    "\n",
    "for i in range(2,num):\n",
    "    if num % i == 0:\n",
    "        print(f\"{num} is not a prime number\")\n",
    "        break\n",
    "\n",
    "    else:\n",
    "        print(f\"{num} is a prime number\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Elif Statements:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "21. Write a Python program to assign grades based on different ranges of scores using elif statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grade A for scoring 87\n"
     ]
    }
   ],
   "source": [
    "score = int(input(\"Enter score out of 100 : \"))\n",
    "\n",
    "if score > 90:\n",
    "    print(f\"grade A+ for scoring {score}\")\n",
    "\n",
    "elif score <= 90 and score > 70:\n",
    "    print(f\"grade A for scoring {score}\")\n",
    "\n",
    "elif score <= 70 and score > 50:\n",
    "    print(f\"grade B for scoring {score}\")\n",
    "\n",
    "elif score <= 50 and score > 30:\n",
    "    print(f\"grade C for scoring {score}\")\n",
    "\n",
    "elif score <= 30 and score > 10:\n",
    "    print(f\"grade D for scoring {score}\")\n",
    "\n",
    "elif score <= 10 and score > 0:\n",
    "    print(f\"grade E for scoring {score}\")\n",
    "\n",
    "else:\n",
    "    print(f\"{score} is not a valid score\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "22. Implement a program to determine the type of a triangle based on its angles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "angle is obtuse angled triangle as side is 105\n"
     ]
    }
   ],
   "source": [
    "angle1 = int(input(\"Enter angle of side 1 (in degree) : \"))\n",
    "angle2 = int(input(\"Enter angle of side 2 (in degree) : \"))\n",
    "angle3 = int(input(\"Enter angle of side 3 (in degree) : \"))\n",
    "\n",
    "\n",
    "if angle1>=90 or angle2>=90 or angle3>=90:\n",
    "    if angle1==90 or angle2==90 or angle3==90:\n",
    "        print(f\"angle is right angled Triangle as side is {max(angle1,angle2,angle3)}\")\n",
    "    \n",
    "    else:\n",
    "        print(f\"angle is obtuse angled triangle as side is {max(angle1,angle2,angle3)}\")\n",
    "\n",
    "else:\n",
    "    print(f\"angle is acute angled triangle as side is {max(angle1,angle2,angle3)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "23. Develop a program to categorize a given person's BMI into underweight, normal, overweight, or obese using\n",
    "elif statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Person is Obese as BMI is 32\n"
     ]
    }
   ],
   "source": [
    "BMI = int(input(\"Enter Person's BMI : \"))\n",
    "\n",
    "if BMI <= 18.5 :\n",
    "    print(f\"Person is Under Weight as BMI is {BMI}\")\n",
    "\n",
    "elif 18.5 < BMI <= 25 :\n",
    "    print(f\"Person is Normal Weight as BMI is {BMI}\")\n",
    "\n",
    "elif 25 < BMI <= 30 :\n",
    "    print(f\"Person is Over Weight as BMI is {BMI}\")\n",
    "\n",
    "else:\n",
    "    print(f\"Person is Obese as BMI is {BMI}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "24. Create a program that determines whether a given number is positive, negative, or zero using elif\n",
    "statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56 is positive\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a Number : \"))\n",
    "if num > 0:\n",
    "    print(f\"{num} is positive\")\n",
    "\n",
    "elif num == 0:\n",
    "    print(f\"{num} is zero\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num} is negetive\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "25. Write a Python script to determine the type of a character (uppercase, lowercase, or special) using elif\n",
    "statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "& is a special character\n"
     ]
    }
   ],
   "source": [
    "char = input(\"Enter a character : \")\n",
    "\n",
    "if char.islower() :\n",
    "    print(f\"{char} is in lowercase\")\n",
    "\n",
    "elif char.isupper() :\n",
    "    print(f\"{char} is in uppercase\")\n",
    "\n",
    "else:\n",
    "    print(f\"{char} is a special character\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "26. Implement a program to calculate the discounted price based on different purchase amounts using elif\n",
    "statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Get 10% off on purachase of above Rs2000\n",
      "      Get 15% off on purachase of above Rs5000\n",
      "      Get 20% off on purachase of above Rs10000\n",
      "      Get 25% off on purachase of above Rs25000\n",
      "      Get 30% off on purachase of above Rs50000\n",
      "      \n",
      "      \n",
      "Congratuations , You will get 25% discount on purchase of 26000 , Final Amount after discount is 19500.0\n"
     ]
    }
   ],
   "source": [
    "print(\"\"\"      Get 10% off on purachase of above Rs2000\n",
    "      Get 15% off on purachase of above Rs5000\n",
    "      Get 20% off on purachase of above Rs10000\n",
    "      Get 25% off on purachase of above Rs25000\n",
    "      Get 30% off on purachase of above Rs50000\n",
    "      \n",
    "      \"\"\")\n",
    "\n",
    "amount = int(input(\"Enter Purchase Amount : \"))\n",
    "\n",
    "\n",
    "\n",
    "if 5000 >= amount > 2000:\n",
    "    print(f\"Congratuations , You will get 10% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*10)/100)}\")\n",
    "\n",
    "elif 10000 >= amount > 5000:\n",
    "    print(f\"Congratuations , You will get 15% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*15)/100)}\")\n",
    "\n",
    "elif 25000 >= amount > 10000:\n",
    "    print(f\"Congratuations , You will get 20% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*20)/100)}\")\n",
    "\n",
    "elif 50000 >= amount > 25000:\n",
    "    print(f\"Congratuations , You will get 25% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*25)/100)}\")\n",
    "\n",
    "elif amount > 50000:\n",
    "    print(f\"Congratuations , You will get 30% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*30)/100)}\")\n",
    "\n",
    "else:\n",
    "    print(f\"Sorry , You are not eligible for any discount as your purchase amount is only {amount}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "27. Develop a program to calculate the electricity bill based on different consumption slabs using elif\n",
    "statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Up to 50 units: 35 INR per unit\n",
      "51 to 150 units: 52.50 INR per unit\n",
      "151 to 250 units:84 INR per unit\n",
      "Above 250 units: 105 INR per unit\n",
      "      \n",
      "\n",
      "Bill amount on 160 units consumption : Rs 13440\n"
     ]
    }
   ],
   "source": [
    "print(\"\"\"Up to 50 units: 35 INR per unit\n",
    "51 to 150 units: 52.50 INR per unit\n",
    "151 to 250 units:84 INR per unit\n",
    "Above 250 units: 105 INR per unit\n",
    "      \n",
    "\"\"\")\n",
    "\n",
    "unit = int(input(\"Enter units consumed in this month : \"))\n",
    "\n",
    "if unit <= 50:\n",
    "    print(f\"Bill amount on {unit} units consumption : Rs {unit*35}\")\n",
    "\n",
    "elif 50 < unit <= 150:\n",
    "    print(f\"Bill amount on {unit} units consumption : Rs {unit*52.5}\")\n",
    "\n",
    "elif 150 < unit <= 250:\n",
    "    print(f\"Bill amount on {unit} units consumption : Rs {unit*84}\")\n",
    "\n",
    "elif 250 < unit:\n",
    "    print(f\"Bill amount on {unit} units consumption : Rs {unit*105}\")\n",
    "\n",
    "else:\n",
    "    print(\"Please Enter Valid Units\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "28. Create a program to determine the type of quadrilateral based on its angles and sides using elif\n",
    "statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sides are (a,b,c,d) : 8 , 8 , 8 , 8 \n",
      "Angles are (a,b,c,d) : 90 , 90 , 90 , 90 \n",
      "quadrilateral is Square\n"
     ]
    }
   ],
   "source": [
    "sa = int(input(\"Enter side a : \"))\n",
    "sb = int(input(\"Enter side b : \"))\n",
    "sc = int(input(\"Enter side c : \"))\n",
    "sd = int(input(\"Enter side d : \"))\n",
    "\n",
    "aa = int(input(\"Enter angle a : \"))\n",
    "ab = int(input(\"Enter angle b : \"))\n",
    "ac = int(input(\"Enter angle c : \"))\n",
    "ad = int(input(\"Enter angle d : \"))\n",
    "\n",
    "print(f\"Sides are (a,b,c,d) : {sa} , {sb} , {sc} , {sd} \")\n",
    "print(f\"Angles are (a,b,c,d) : {aa} , {ab} , {ac} , {ad} \")\n",
    "\n",
    "if sa == sb == sc == sd and aa == ab ==ac == ad == 90:\n",
    "    print(\"quadrilateral is Square\")\n",
    "\n",
    "elif sa == sc and sb == sd and aa == ab ==ac == ad == 90:\n",
    "    print(\"quadrilateral is Rectangle\")\n",
    "\n",
    "elif sa == sb == sc == sd and aa == ac and ab == ad:\n",
    "    print(\"quadrilateral is Rhombus\")\n",
    "\n",
    "elif sa == sc and sb == sd and aa == ac and ab == ad:\n",
    "    print(\"quadrilateral is Parallelogram\")\n",
    "\n",
    "elif sa == sc or sb == sd and aa + ab == 180 and ac + ad == 180:\n",
    "    print(\"quadrilateral is Trapezoid\")\n",
    "\n",
    "else:\n",
    "    print(\"It is regular quadrilateral\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "29. Write a Python script to determine the season based on a user-provided month using elif statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Number for Month \n",
      "      1 - January\n",
      "      2 - February\n",
      "      3 - March\n",
      "      4 - April\n",
      "      5 - May\n",
      "      6 - June\n",
      "      7 - July\n",
      "      8 - August\n",
      "      9 - September\n",
      "      10 - October\n",
      "      11 - November\n",
      "      12 - December\n",
      "The season for 7th month is Summer\n"
     ]
    }
   ],
   "source": [
    "print(\"\"\"Enter Number for Month \n",
    "      1 - January\n",
    "      2 - February\n",
    "      3 - March\n",
    "      4 - April\n",
    "      5 - May\n",
    "      6 - June\n",
    "      7 - July\n",
    "      8 - August\n",
    "      9 - September\n",
    "      10 - October\n",
    "      11 - November\n",
    "      12 - December\"\"\")\n",
    "\n",
    "month = int(input(\"\"))\n",
    "\n",
    "if month == 3 or month == 4 or month == 5:\n",
    "    print(f\"The season for {month} month is Spring\")\n",
    "\n",
    "if month == 6 or month == 7 or month == 8:\n",
    "    print(f\"The season for {month}th month is Summer\")\n",
    "\n",
    "if month == 9 or month == 10 or month == 11:\n",
    "    print(f\"The season for {month}th month is Autumn\")\n",
    "\n",
    "if month == 12 or month == 1 or month == 2:\n",
    "    print(f\"The season for {month} month is Winter\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "30. Implement a program to determine the type of a year (leap or common) and month (30 or 31 days) using\n",
    "elif statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024 is a leap year\n",
      "2024 is a leap year , so February has 29 days\n"
     ]
    }
   ],
   "source": [
    "year = int(input(\"enter year : \"))\n",
    "\n",
    "if year % 4 == 0 :\n",
    "    if year % 100 == 0:\n",
    "        if year % 400 == 0:\n",
    "            print(f\"{year} is a leap year\")\n",
    "        else:\n",
    "            print(f\"{year} is a common year\")\n",
    "    else:\n",
    "        print(f\"{year} is a leap year\")\n",
    "else:\n",
    "    print(f\"{year} is a common year\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "month = int(input(\"Enter Month (1-12)\"))\n",
    "\n",
    "if month in (1,3,5,7,8,10,12):\n",
    "    print(f\"{month}th is of 31 days\")\n",
    "\n",
    "elif month == 2:\n",
    "    if year % 4 == 0:\n",
    "        if year % 100 == 0 :\n",
    "            if year % 400 == 0:\n",
    "                print(f\"{year} is a leap year , so February has 29 days\")\n",
    "            else:\n",
    "                print(f\"{year} is a common year , so February has 28 days\")\n",
    "        else:\n",
    "            print(f\"{year} is a leap year , so February has 29 days\")\n",
    "    else:\n",
    "        print(f\"{year} is a common year , so February has 28 days\")\n",
    "\n",
    "elif month in (4,6,9,11):\n",
    "    print(f\"{month}th is of 30 days\")\n",
    "\n",
    "else:\n",
    "    print(\"Please Enter month between (1-12)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Basic Level:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Write a Python program that checks if a given number is positive, negative, or zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-53 is negetive\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a Number : \"))\n",
    "if num >= 0:\n",
    "    if num == 0:\n",
    "        print(f\"{num} is zero\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{num} is positive\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num} is negetive\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Create a program to determine if a person is eligible to vote based on their age."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are 12 years old and not eligible for vote\n"
     ]
    }
   ],
   "source": [
    "age = int (input(\"Enter your age : \"))\n",
    "\n",
    "if age >= 18:\n",
    "    print(f\"You are {age} years old and eligible for vote\")\n",
    "\n",
    "else:\n",
    "    print(f\"You are {age} years old and not eligible for vote\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Write a program to find the maximum of two given numbers using conditional statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 is maximum than -50\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st number : \"))\n",
    "num2 = int(input(\"Enter 2nd number : \"))\n",
    "\n",
    "if num1>num2 :\n",
    "    print(f\"{num1} is maximum than {num2}\")\n",
    "\n",
    "elif num1==num2:\n",
    "    print(f\"{num1} and {num2} are same\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num2} is maximum than {num1}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Develop a program that calculates the grade of a student based on their exam score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grade B for scoring 68\n"
     ]
    }
   ],
   "source": [
    "score = int(input(\"Enter score out of 100 : \"))\n",
    "\n",
    "if score > 90:\n",
    "    print(f\"grade A+ for scoring {score}\")\n",
    "\n",
    "elif score <= 90 and score > 70:\n",
    "    print(f\"grade A for scoring {score}\")\n",
    "\n",
    "elif score <= 70 and score > 50:\n",
    "    print(f\"grade B for scoring {score}\")\n",
    "\n",
    "elif score <= 50 and score > 30:\n",
    "    print(f\"grade C for scoring {score}\")\n",
    "\n",
    "elif score <= 30 and score > 10:\n",
    "    print(f\"grade D for scoring {score}\")\n",
    "\n",
    "elif score <= 10 and score > 0:\n",
    "    print(f\"grade E for scoring {score}\")\n",
    "\n",
    "else:\n",
    "    print(f\"{score} is not a valid score\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Create a program that checks if a year is a leap year or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2022 is not a leap year\n"
     ]
    }
   ],
   "source": [
    "year = int(input(\"Enter year : \"))\n",
    "\n",
    "if year % 4 == 0:\n",
    "\n",
    "    if year % 100 == 0:\n",
    "\n",
    "        if year % 400 == 0:\n",
    "            print(f\"{year} is a leap year\")\n",
    "\n",
    "        else:\n",
    "            print(f\"{year} is not a leap year\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{year} is a leap year\")\n",
    "\n",
    "else:\n",
    "    print(f\"{year} is not a leap year\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Write a program to classify a triangle based on its sides' lengths."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "triangle is Scalene Triangle with sides 6 , 9 and 3\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st side : \"))\n",
    "num2 = int(input(\"Enter 2nd side : \"))\n",
    "num3 = int(input(\"Enter 3rd side : \"))\n",
    "\n",
    "if num1 == num2:\n",
    "    if num2 == num3:\n",
    "        print(f\"triangle is Equilateral Triangle with sides {num1} , {num2} and {num3}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"triangle is Isosceles Triangle with sides {num1} , {num2} and {num3}\")\n",
    "\n",
    "else:\n",
    "    if num2 == num3 :\n",
    "        print(f\"triangle is Isosceles Triangle with sides {num1} , {num2} and {num3}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"triangle is Scalene Triangle with sides {num1} , {num2} and {num3}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. Build a program that determines the largest of three given numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 is greatest than 5 and 6\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st Number : \"))\n",
    "num2 = int(input(\"Enter 2nd Number : \"))\n",
    "num3 = int(input(\"Enter 3rd Number : \"))\n",
    "\n",
    "if num1 > num2 and num1 > num3:\n",
    "    print(f\"{num1} is greatest than {num2} and {num3}\")\n",
    "\n",
    "elif num2 > num1 and num2 > num3:\n",
    "    print(f\"{num2} is greatest than {num1} and {num3}\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num3} is greatest than {num1} and {num2}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. Develop a program that checks whether a character is a vowel or a consonant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "G is a consonant\n"
     ]
    }
   ],
   "source": [
    "string = input(\"Enter character \")\n",
    "\n",
    "if string in \"aeiou\":\n",
    "    print(f\"{string} is a vowel\")\n",
    "\n",
    "else:\n",
    "    print(f\"{string} is a consonant\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. Create a program to calculate the total cost of a shopping cart based on discounts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Get 10% off on purachase of above Rs2000\n",
      "      Get 15% off on purachase of above Rs5000\n",
      "      Get 20% off on purachase of above Rs10000\n",
      "      Get 25% off on purachase of above Rs25000\n",
      "      Get 30% off on purachase of above Rs50000\n",
      "      \n",
      "      \n",
      "Congratuations , You will get 30% discount on purchase of 55000 , Final Amount after discount is 38500.0\n"
     ]
    }
   ],
   "source": [
    "print(\"\"\"      Get 10% off on purachase of above Rs2000\n",
    "      Get 15% off on purachase of above Rs5000\n",
    "      Get 20% off on purachase of above Rs10000\n",
    "      Get 25% off on purachase of above Rs25000\n",
    "      Get 30% off on purachase of above Rs50000\n",
    "      \n",
    "      \"\"\")\n",
    "\n",
    "amount = int(input(\"Enter Purchase Amount : \"))\n",
    "\n",
    "\n",
    "\n",
    "if 5000 >= amount > 2000:\n",
    "    print(f\"Congratuations , You will get 10% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*10)/100)}\")\n",
    "\n",
    "elif 10000 >= amount > 5000:\n",
    "    print(f\"Congratuations , You will get 15% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*15)/100)}\")\n",
    "\n",
    "elif 25000 >= amount > 10000:\n",
    "    print(f\"Congratuations , You will get 20% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*20)/100)}\")\n",
    "\n",
    "elif 50000 >= amount > 25000:\n",
    "    print(f\"Congratuations , You will get 25% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*25)/100)}\")\n",
    "\n",
    "elif amount > 50000:\n",
    "    print(f\"Congratuations , You will get 30% discount on purchase of {amount} , Final Amount after discount is {amount - ((amount*30)/100)}\")\n",
    "\n",
    "else:\n",
    "    print(f\"Sorry , You are not eligible for any discount as your purchase amount is only {amount}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10. Write a program that checks if a given number is even or odd."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44 is even\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a Number : \"))\n",
    "\n",
    "if num % 2 == 0:\n",
    "    print(f\"{num} is even\")\n",
    "\n",
    "else:\n",
    "    print(f\"{num} is odd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Intermediate Level:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11. Write a program that calculates the roots of a quadratic equation .\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "quadratic equation format (ax² + bx + c)\n",
      "quadratic equation is (3x² + 6x + 3)\n",
      "discriminant is 0\n",
      "discriminant is zero , Root is -1.0\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "print(\"quadratic equation format (ax\\u00b2 + bx + c)\")\n",
    "a = int(input(\"Enter value of a\"))\n",
    "b = int(input(\"Enter value of b\"))\n",
    "c = int(input(\"Enter value of c\"))\n",
    "\n",
    "print(f\"quadratic equation is ({a}x\\u00b2 + {b}x + {c})\")\n",
    "\n",
    "\n",
    "discriminant = b**2 - 4*a*c\n",
    "\n",
    "print(\"discriminant is\", discriminant)\n",
    "\n",
    "\n",
    "if discriminant <0:\n",
    "    print(\"discriminant is negetive , Roots are Complex\")\n",
    "\n",
    "else:\n",
    "    if discriminant == 0:\n",
    "        print(f\"discriminant is zero , Root is {-b/(2*a)}\")\n",
    "\n",
    "    else:\n",
    "        print(\"discriminant is positive , \",end =\"\")\n",
    "\n",
    "\n",
    "        discriminant_root = math.sqrt(discriminant)\n",
    "        x1 = ((- b + discriminant_root)/(2*a))\n",
    "        x2 = ((- b - discriminant_root)/(2*a))\n",
    "\n",
    "        print(f\"Roots are {x1} and {x2}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "12. Create a program that determines the day of the week based on the day number (1-7).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the day 5 of the week is Friday\n"
     ]
    }
   ],
   "source": [
    "day = int(input(\"Enter day of a Week (1 - 7): \"))\n",
    "\n",
    "days = ['Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday']\n",
    "\n",
    "day_week = days[day-1]\n",
    "\n",
    "print(f\"the day {day} of the week is {day_week}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13. Develop a program that calculates the factorial of a given number using recursion.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "factorial of 4 : 24\n"
     ]
    }
   ],
   "source": [
    "def factorial(num):\n",
    "\n",
    "    if num == 0:\n",
    "        return 1\n",
    "\n",
    "    else:\n",
    "        return num * factorial(num-1)\n",
    "\n",
    "num = int(input(\"Enter Number : \"))\n",
    "\n",
    "print(f\"factorial of {num} : {factorial(num)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "14. Write a program to find the largest among three numbers without using the `max()` function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45 is greater than 5 and 9\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st Number : \"))\n",
    "num2 = int(input(\"Enter 2nd Number : \"))\n",
    "num3 = int(input(\"Enter 3rd Number : \"))\n",
    "\n",
    "if num1>num2:\n",
    "    if num1> num3:\n",
    "        print(f\"{num1} is greater tham {num2} and {num3}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{num3} is greater than {num1} and {num2}\")\n",
    "\n",
    "else:\n",
    "    if num2>num3:\n",
    "        print(f\"{num2} is greater than {num1} and {num2}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"{num3} is greater than {num1} and {num2}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "15. Create a program that simulates a basic ATM transaction menu.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the Finance ATM\n",
      "Press 1 : Check Balance\n",
      "Press 2 : Deposit\n",
      "Press 3 : Withdraw\n",
      "      \n",
      "      \n",
      "Balance : 5000\n",
      "Deposit\n",
      "                                     Deposit of Rs5000 Done\n",
      "                                                                                         Updated Balance : 10000\n",
      "\n",
      "Withdraw\n",
      "                                     Withdraw of Rs7000 Done\n",
      "                                                                                         Updated Balance : 3000\n",
      "\n",
      "Check Balance\n",
      "                                                                                         Current Balance is 3000\n",
      "\n",
      "Enter valid key\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Welcome to the Finance ATM\")\n",
    "\n",
    "print(\"\"\"Press 1 : Check Balance\n",
    "Press 2 : Deposit\n",
    "Press 3 : Withdraw\n",
    "      \n",
    "      \"\"\")\n",
    "\n",
    "Balance = 5000\n",
    "print(f\"Balance : {Balance}\")\n",
    "\n",
    "while True:\n",
    "    op = int(input(\"Enter Operation No. : \"))\n",
    "\n",
    "\n",
    "    if op == 1:\n",
    "        print(\"Check Balance\")\n",
    "        print(f\"                                                                                         Current Balance is {Balance}\")\n",
    "        print()\n",
    "\n",
    "    elif op == 2:\n",
    "        print(\"Deposit\")\n",
    "        deposit = int(input(\"Enter Deposit Amount : \"))\n",
    "        Balance += deposit\n",
    "        print(f\"                                     Deposit of Rs{deposit} Done\")\n",
    "        print(f\"                                                                                         Updated Balance : {Balance}\")\n",
    "        print()\n",
    "\n",
    "    elif op == 3:\n",
    "        print(\"Withdraw\")\n",
    "        withdraw = int(input(\"Enter withdraw Amount\"))\n",
    "        Balance -= withdraw\n",
    "        print(f\"                                     Withdraw of Rs{withdraw} Done\")\n",
    "        print(f\"                                                                                         Updated Balance : {Balance}\")\n",
    "        print()\n",
    "\n",
    "    else:\n",
    "        print(\"Enter valid key\")\n",
    "        print()\n",
    "        break\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "16. Build a program that checks if a given string is a palindrome or not.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This 'level' is a palindrome\n"
     ]
    }
   ],
   "source": [
    "string = input(\"Enter a string : \")\n",
    "\n",
    "if string == string[::-1]:\n",
    "    print(f\"This '{string}' is a palindrome\")\n",
    "\n",
    "else:\n",
    "    print(f\"This '{string}' is not a palindrome\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "17. Write a program that calculates the average of a list of numbers, excluding the smallest and largest values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the average of a list of numbers : [2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
      "excluding the smallest and largest values is 6.0\n"
     ]
    }
   ],
   "source": [
    "list1 = [2,3,4,5,6,7,8,9,10]\n",
    "\n",
    "print(f\"the average of a list of numbers : {list1}\")\n",
    "\n",
    "list1.remove(max(list1))\n",
    "list1.remove(min(list1))\n",
    "\n",
    "sum=0\n",
    "count = 0\n",
    "for i in list1:\n",
    "    sum += i\n",
    "    count += 1\n",
    "    avg = sum/count\n",
    "\n",
    "print(f\"excluding the smallest and largest values is {avg}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "18. Develop a program that converts a given temperature from Celsius to Fahrenheit.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Temperature (in Celsius) : 40\n",
      "Temperature (in  Fahrenheit) : 104.0\n"
     ]
    }
   ],
   "source": [
    "temp_Cal = int(input(\"enter temperature in calcius\"))\n",
    "Fahrenheit = (temp_Cal * 9/5) + 32 \n",
    "\n",
    "print(f\"Temperature (in Celsius) : {temp_Cal}\")\n",
    "print(f\"Temperature (in  Fahrenheit) : {Fahrenheit}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "19. Create a program that simulates a basic calculator for addition, subtraction, multiplication, and division.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculator\n",
      "Press 1 : Addition\n",
      "Press 2 : Subtraction\n",
      "Press 3 : Multiplication\n",
      "Press 4 : Division\n",
      "      \n",
      "\n",
      "Multiplication\n",
      "6 x 9 = 54\n"
     ]
    }
   ],
   "source": [
    "print(\"\"\"Calculator\n",
    "Press 1 : Addition\n",
    "Press 2 : Subtraction\n",
    "Press 3 : Multiplication\n",
    "Press 4 : Division\n",
    "      \n",
    "\"\"\")\n",
    "\n",
    "op = int(input(\"Enter Operation No. : \"))\n",
    "a = int(input(\"Enter 1st No. : \"))\n",
    "b = int(input(\"Enter 2nd No. : \"))\n",
    "\n",
    "if op == 1:\n",
    "    print(\"Addition\")\n",
    "    print(f\"{a} + {b} = {a+b}\")\n",
    "\n",
    "elif op == 2:\n",
    "    print(\"Subtraction\")\n",
    "    print(f\"{a} - {b} = {a-b}\")\n",
    "\n",
    "elif op == 3:\n",
    "    print(\"Multiplication\")\n",
    "    print(f\"{a} x {b} = {a*b}\")\n",
    "\n",
    "elif op == 4:\n",
    "    print(\"Division\")\n",
    "    print(f\"{a} / {b} = {a/b}\")\n",
    "\n",
    "else:\n",
    "    print(\"Enter Valid Operation No.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "20. Write a program that determines the roots of a cubic equation using the Cardano formula."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cubic equation format (ax³ + bx² + cx + d = 0)\n",
      "cubic equation is (1x³ + -6x² + 11x + -6 = 0)\n",
      "discriminant is 4\n",
      "discriminant is positive , There is only one real root and two complex roots.\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "print(\"cubic equation format (ax\\u00b3 + bx\\u00b2 + cx + d = 0)\")\n",
    "\n",
    "a = int(input(\"Enter value of a\"))\n",
    "b = int(input(\"Enter value of b\"))\n",
    "c = int(input(\"Enter value of c\"))\n",
    "d = int(input(\"Enter value of d\"))\n",
    "\n",
    "print(f\"cubic equation is ({a}x\\u00b3 + {b}x\\u00b2 + {c}x + {d} = 0)\")\n",
    "\n",
    "discriminant = (18*a*b*c*d - 4*(b**3)*d + (b**2)*(c**2) - 4*a*(c**3) - 27*(a**2)*(d**2))\n",
    "print(\"discriminant is\", discriminant)\n",
    "\n",
    "\n",
    "p = (3 * a * c - b ** 2) / (3 * a ** 2)\n",
    "q = (2 * b ** 3 - 9 * a * b * c + 27 * a ** 2 * d) / (27 * a ** 3)\n",
    "\n",
    "if discriminant <0:\n",
    "    print(\"discriminant is negetive , There are 3 Real Roots\")\n",
    "\n",
    "    theta = math.acos(q / (2 * (-p) ** 1.5))\n",
    "    x1 = 2 * (-p) ** (1/3) * math.cos(theta / 3) - b / (3 * a)\n",
    "    x2 = 2 * (-p) ** (1/3) * math.cos((theta + 2 * math.pi) / 3) - b / (3 * a)\n",
    "    x3 = 2 * (-p) ** (1/3) * math.cos((theta + 4 * math.pi) / 3) - b / (3 * a)\n",
    "    print(f\"Roots are {x1} , {x2} and {x3}\")\n",
    "\n",
    "else:\n",
    "    if discriminant == 0:\n",
    "        print(f\"discriminant is zero , There is one real root and two equal complex roots \")\n",
    "\n",
    "    else:\n",
    "        print(\"discriminant is positive , There is only one real root and two complex roots.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Advanced Level:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "21. Create a program that calculates the income tax based on the user's income and tax brackets.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the income tax slabs for individuals :\n",
      "Income up to ₹2,50,000: No tax\n",
      "Income from ₹2,50,001 to ₹5,00,000: 5%\n",
      "Income from ₹5,00,001 to ₹10,00,000: 20%\n",
      "Income above ₹10,00,000: 30%\n",
      "      \n",
      "\n",
      "As your income is Rs 18 lakhs more than Rs 10 lakhs so you are liable to 30% tax of Rs 5.4lakhs\n"
     ]
    }
   ],
   "source": [
    "print(\"\"\"the income tax slabs for individuals :\n",
    "Income up to ₹2,50,000: No tax\n",
    "Income from ₹2,50,001 to ₹5,00,000: 5%\n",
    "Income from ₹5,00,001 to ₹10,00,000: 20%\n",
    "Income above ₹10,00,000: 30%\n",
    "      \n",
    "\"\"\")\n",
    "\n",
    "income = int(input(\"Enter your Annual Income (in lakhs) : \"))\n",
    "\n",
    "if income <= 2.5:\n",
    "    print(f\"As your income is Rs {income} lakhs is under Rs 2.5 lakhs so you are liable to No tax\")\n",
    "\n",
    "elif 2.5 < income <= 5:\n",
    "    print(f\"As your income is Rs {income} lakhs is under Rs 5 lakhs so you are liable to 5% tax of Rs {((income*5)/100)}lakhs\")\n",
    "\n",
    "elif 5 < income <= 10:\n",
    "    print(f\"As your income is Rs {income} lakhs is under Rs 10 lakhs so you are liable to 20% tax of Rs {((income*20)/100)}lakhs\")\n",
    "\n",
    "elif income > 10 :\n",
    "    print(f\"As your income is Rs {income} lakhs more than Rs 10 lakhs so you are liable to 30% tax of Rs {((income*30)/100)}lakhs\")\n",
    "\n",
    "else:\n",
    "    print(\"Enter Valid Income\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "22. Write a program that simulates a rock-paper-scissors game against the computer.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rock - Paper - Scissors Game\n",
      "User Choose paper and Computer Choose rock\n",
      "User Wins !!!!\n",
      "\n",
      "User Choose rock and Computer Choose paper\n",
      "Computer Wins !!!!\n",
      "\n",
      "Enter Valid Input\n",
      "\n",
      "Game Ended\n"
     ]
    }
   ],
   "source": [
    "import random \n",
    "\n",
    "print(\"Rock - Paper - Scissors Game\")\n",
    "\n",
    "while True:\n",
    "    user = input(\"Enter your choice (rock , paper , scissors , quit) : \")\n",
    "    computer = random.choice([\"rock\" , \"paper\" , \"scissors\"])\n",
    "\n",
    "\n",
    "    if user == \"quit\":\n",
    "        print(\"Game Ended\")\n",
    "        break \n",
    "    \n",
    "    elif user == computer:\n",
    "        print(f\"User Choose {user} and Computer Choose {computer}\")\n",
    "        print(\"Its a Tie\")\n",
    "        print()\n",
    "\n",
    "    elif (user == \"paper\" and computer == \"rock\") \\\n",
    "    or   (user == \"rock\" and computer == \"scissors\") \\\n",
    "    or   (user == \"scissors\" and computer == \"paper\"):\n",
    "        print(f\"User Choose {user} and Computer Choose {computer}\")\n",
    "        print(\"User Wins !!!!\")\n",
    "        print()\n",
    "\n",
    "    elif (computer == \"paper\" and user == \"rock\") \\\n",
    "    or   (computer == \"rock\" and user == \"scissors\") \\\n",
    "    or   (computer == \"scissors\" and user == \"paper\"):\n",
    "        print(f\"User Choose {user} and Computer Choose {computer}\")\n",
    "        print(\"Computer Wins !!!!\")   \n",
    "        print()\n",
    "\n",
    "    else:\n",
    "        print(\"Enter Valid Input\")\n",
    "        print()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "23. Develop a program that generates a random password based on user preferences (length, complexity).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your Generated Password is P3Y@Tzo#\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "import string\n",
    "\n",
    "len = int(input(\"Enter Lenth of Password : \"))\n",
    "comp = input(\"Enter Complexity (Low , Medium , Hard)\").lower()\n",
    "\n",
    "if comp == \"low\":\n",
    "    str = string.ascii_letters + string.digits\n",
    "\n",
    "elif comp == \"medium\":\n",
    "    str = string.ascii_letters + string.digits + string.punctuation\n",
    "\n",
    "elif comp == \"high\":\n",
    "    str = string.ascii_letters + string.digits + string.punctuation + string.ascii_uppercase\n",
    "\n",
    "else:\n",
    "    print(\"Enter Valid Option\")\n",
    "\n",
    "password = \"\".join(random.choice(str) for i in range(len))\n",
    "\n",
    "print(f\"Your Generated Password is {password}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "24. Create a program that implements a simple text-based adventure game with branching scenarios.\n",
    "                                                                                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Welcome to the Text-Based Adventure Game!\n",
      "\n",
      " You wake up and wants to do something interesting\n",
      "\n",
      "What do you want to do?\n",
      "1. Go to School\n",
      "2. Go to Park\n",
      "3. Try to say Lie to Parents\n",
      "4. Quit\n",
      "\n",
      "You choose to Go to Park.\n",
      "You encounter to relative.\n",
      "What do you want to do?\n",
      "1. Try to say Lie\n",
      "2. Go to their home\n",
      "3. Go back\n",
      "\n",
      "You encounter to relative.\n",
      "Eat Cookies and drink Cold Drink\n",
      "Parents find out that you not go to school\n",
      "\n",
      "What do you want to do?\n",
      "1. Go to School\n",
      "2. Go to Park\n",
      "3. Try to say Lie to Parents\n",
      "4. Quit\n",
      "Thanks for playing!\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "\n",
    "def Go_to_School():\n",
    "    print(\"\\nYou decide to explore the School.\")\n",
    "    print(\"You encounter to the Sports Teacher.\")\n",
    "    print(\"What do you want to do?\")\n",
    "    print(\"1. Get Punished\")\n",
    "    print(\"2. Try to say Lie\")\n",
    "    print(\"3. Go back\")\n",
    "\n",
    "    choice = input(\"Enter your choice (1, 2, or 3): \")\n",
    "\n",
    "    if choice == \"1\":\n",
    "        print(\"\\n Not Punished ,But got Warning from Principal\")\n",
    "    elif choice == \"2\":\n",
    "        print(\"\\nTry to say Lie\")\n",
    "        print(\"Hesitate , Punished by Sports Teacher\")\n",
    "        print(\"Suspend for 1 Week\")\n",
    "    elif choice == \"3\":\n",
    "        print(\"\\n Go back\")\n",
    "    else:\n",
    "        print(\"\\nInvalid choice. Please enter 1, 2, or 3.\")\n",
    "\n",
    "def Go_to_Park():\n",
    "    print(\"\\nYou choose to Go to Park.\")\n",
    "    print(\"You encounter to relative.\")\n",
    "    print(\"What do you want to do?\")\n",
    "    print(\"1. Try to say Lie\")\n",
    "    print(\"2. Go to their home\")\n",
    "    print(\"3. Go back\")\n",
    "\n",
    "    choice = input(\"Enter your choice (1, 2, or 3): \")\n",
    "\n",
    "    if choice == \"1\":\n",
    "        print(\"\\nYou said 'I practice for upcoming Tournament '\")\n",
    "    elif choice == \"2\":\n",
    "        print(\"\\nYou encounter to relative.\")\n",
    "        print(\"Eat Cookies and drink Cold Drink\")\n",
    "        print(\"Parents find out that you not go to school\")\n",
    "    elif choice == \"3\":\n",
    "        print(\"\\nYou decide to go back to the starting point.\")\n",
    "    else:\n",
    "        print(\"\\nInvalid choice. Please enter 1, 2, or 3.\")\n",
    "\n",
    "def Parents():\n",
    "    print(\"\\nTry to say Lie to Parents\")\n",
    "    print(\"You said 'I suffer from fever' and eat Oats\")\n",
    "\n",
    "\n",
    "\n",
    "def start_day():\n",
    "    print(\" Welcome to the Text-Based Adventure Game!\")\n",
    "    print(\"\\n You wake up and wants to do something interesting\")\n",
    "\n",
    "    while True:\n",
    "        print(\"\\nWhat do you want to do?\")\n",
    "        print(\"1. Go to School\")\n",
    "        print(\"2. Go to Park\")\n",
    "        print(\"3. Try to say Lie to Parents\")\n",
    "        print(\"4. Quit\")\n",
    "\n",
    "        choice = input(\"Enter your choice (1, 2, 3, or 4): \")\n",
    "\n",
    "        if choice == \"1\":\n",
    "            Go_to_School()\n",
    "        elif choice == \"2\":\n",
    "            Go_to_Park()\n",
    "        elif choice == \"3\":\n",
    "            Parents()\n",
    "        elif choice == \"4\":\n",
    "            print(\"Thanks for playing!\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice. Please enter 1, 2, 3, or 4.\")\n",
    "    \n",
    "\n",
    "start_day()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "25. Build a program that solves a linear equation for x, considering different cases.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Equation Format : ax + b = 0\n",
      "Linear Equation : 4x + 28 = 0\n",
      "a = 4 and b = 28\n",
      "Solution of x : x = -7.0\n"
     ]
    }
   ],
   "source": [
    "print(\"Linear Equation Format : ax + b = 0\")\n",
    "\n",
    "a = int(input(\"Enter Value of a :\"))\n",
    "b = int(input(\"Enter Value of b :\"))\n",
    "\n",
    "print(f\"Linear Equation : {a}x + {b} = 0\")\n",
    "print(f\"a = {a} and b = {b}\")\n",
    "\n",
    "if a == 0:\n",
    "    if b == 0:\n",
    "        print(f\"Equation has infinite solutions (all real numbers) as a == 0 and b == 0\")\n",
    "\n",
    "    else:\n",
    "        print(f\"Equation has infinite solutions (all real numbers) as a == 0 and b not= 0\")\n",
    "\n",
    "else:\n",
    "    x = -b/a\n",
    "    print(f\"Solution of x : x = {x}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "26. Write a program that simulates a basic quiz game with multiple-choice questions and scoring.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome To Quiz\n",
      "\n",
      "4 Points for Correct Answer\n",
      "-2 Points for Wrong Answer\n",
      "\n",
      "\n",
      "Congratulations , Your Answer is Correct\n",
      "You got 4 Points , Score : 4\n",
      "\n",
      "\n",
      "Congratulations , Your Answer is Correct\n",
      "You got 4 Points , Score : 8\n",
      "\n",
      "\n",
      "Congratulations , Your Answer is Correct\n",
      "You got 4 Points , Score : 12\n",
      "\n",
      "\n",
      "Unfortunately , Your answer is Wrong\n",
      "You got -2 Points , Score : 10\n",
      "\n",
      "\n",
      "Congratulations , Your Answer is Correct\n",
      "You got 4 Points , Score : 14\n",
      "\n",
      "\n",
      "Unfortunately , Your answer is Wrong\n",
      "You got -2 Points , Score : 12\n",
      "\n",
      "\n",
      "Congratulations , Your Answer is Correct\n",
      "You got 4 Points , Score : 16\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Welcome To Quiz\")\n",
    "\n",
    "print(\"\"\"\n",
    "4 Points for Correct Answer\n",
    "-2 Points for Wrong Answer\n",
    "\"\"\")\n",
    "\n",
    "score = 0 \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "a = input(\"\"\"What is the Capital of India : \n",
    "a)Banglore b)Bhopal c)Delhi d)Mumbai\"\"\").lower()\n",
    "\n",
    "if a == \"delhi\":\n",
    "    score += 4\n",
    "    print(f\"\"\"\n",
    "Congratulations , Your Answer is Correct\n",
    "You got 4 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "else:\n",
    "    score -= 2\n",
    "    print(f\"\"\"\n",
    "Unfortunately , Your answer is Wrong\n",
    "You got -2 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "b = input(\"\"\"What is the Capital of Madhya Pradesh : \n",
    "a)Banglore b)Bhopal c)Delhi d)Mumbai\"\"\").lower()\n",
    "\n",
    "if b == \"bhopal\":\n",
    "    score += 4\n",
    "    print(f\"\"\"\n",
    "Congratulations , Your Answer is Correct\n",
    "You got 4 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "else:\n",
    "    score -= 2\n",
    "    print(f\"\"\"\n",
    "          \n",
    "Unfortunately , Your answer is Wrong\n",
    "You got -2 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "c = input(\"\"\"Where is \"India Gate\" Located : \n",
    "a)Banglore b)Bhopal c)Delhi d)Mumbai\"\"\").lower()\n",
    "\n",
    "if c == \"delhi\":\n",
    "    score += 4\n",
    "    print(f\"\"\"\n",
    "Congratulations , Your Answer is Correct\n",
    "You got 4 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "else:\n",
    "    score -= 2\n",
    "    print(f\"\"\"\n",
    "Unfortunately , Your answer is Wrong\n",
    "You got -2 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "d = input(\"\"\"WHere is \"Gate of India\" Located : \n",
    "a)Banglore b)Bhopal c)Delhi d)Mumbai\"\"\").lower()\n",
    "\n",
    "if d == \"mumbai\":\n",
    "    score += 4\n",
    "    print(f\"\"\"\n",
    "Congratulations , Your Answer is Correct\n",
    "You got 4 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "else:\n",
    "    score -= 2\n",
    "    print(f\"\"\"\n",
    "Unfortunately , Your answer is Wrong\n",
    "You got -2 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "e = input(\"\"\"What is the Capital of Karnataka : \n",
    "a)Banglore b)Bhopal c)Delhi d)Mumbai\"\"\").lower()\n",
    "\n",
    "if e == \"banglore\":\n",
    "    score += 4\n",
    "    print(f\"\"\"\n",
    "Congratulations , Your Answer is Correct\n",
    "You got 4 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "else:\n",
    "    score -= 2\n",
    "    print(f\"\"\"\n",
    "Unfortunately , Your answer is Wrong\n",
    "You got -2 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "f = input(\"\"\"Which City is called \"IT Hub\" of India : \n",
    "a)Banglore b)Bhopal c)Delhi d)Mumbai\"\"\").lower()\n",
    "\n",
    "if f == \"banglore\":\n",
    "    score += 4\n",
    "    print(f\"\"\"\n",
    "Congratulations , Your Answer is Correct\n",
    "You got 4 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "else:\n",
    "    score -= 2\n",
    "    print(f\"\"\"\n",
    "Unfortunately , Your answer is Wrong\n",
    "You got -2 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "g = input(\"\"\"What is the capital of Maharashtra : \n",
    "a)Banglore b)Bhopal c)Delhi d)Mumbai\"\"\").lower()\n",
    "\n",
    "if g == \"mumbai\":\n",
    "    score += 4\n",
    "    print(f\"\"\"\n",
    "Congratulations , Your Answer is Correct\n",
    "You got 4 Points , Score : {score}\n",
    "\"\"\")\n",
    "    \n",
    "else:\n",
    "    score -= 2\n",
    "    print(f\"\"\"\n",
    "Unfortunately , Your answer is Wrong\n",
    "You got -2 Points , Score : {score}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "27. Develop a program that determines whether a given year is a prime number or not.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Year 2017 is a prime number\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a year : \"))\n",
    "\n",
    "for i in range(2,num):\n",
    "    if num % i == 0:\n",
    "        print(f\"Year {num} is not a prime number\")\n",
    "        break\n",
    "\n",
    "    else:\n",
    "        print(f\"Year {num} is a prime number\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "28. Create a program that sorts three numbers in ascending order using conditional statements.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "three numbers in ascending order : 123 , 456 , 789\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter 1st Number : \"))\n",
    "num2 = int(input(\"Enter 2nd Number : \"))\n",
    "num3 = int(input(\"Enter 3rd Number : \"))\n",
    "\n",
    "if num1 > num2 and num1 >num3:\n",
    "    if num2 > num3:\n",
    "        print(f\"three numbers in ascending order : {num3} , {num2} , {num1}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"three numbers in ascending order : {num2} , {num3} , {num1}\")\n",
    "\n",
    "elif num2 > num1 and num2 > num3:\n",
    "    if num1 > num3:\n",
    "        print(f\"three numbers in ascending order : {num3} , {num1} , {num2}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"three numbers in ascending order : {num1} , {num3} , {num2}\")\n",
    "\n",
    "else:\n",
    "    if num1 > num2:\n",
    "        print(f\"three numbers in ascending order : {num2} , {num1} , {num3}\")\n",
    "\n",
    "    else:\n",
    "        print(f\"three numbers in ascending order : {num1} , {num2} , {num3}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "29. Build a program that determines the roots of a quartic equation using numerical methods.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quartic Equation Solver using Newton-Raphson Method\n",
      "Enter the coefficients of the quartic equation (ax^4 + bx^3 + cx^2 + dx + e):\n",
      "The root of the quartic equation is approximately: 3.000000\n"
     ]
    }
   ],
   "source": [
    "def f(x, coefficients):\n",
    "    \"\"\"\n",
    "    Function to evaluate the quartic equation f(x) = ax^4 + bx^3 + cx^2 + dx + e\n",
    "    \"\"\"\n",
    "    a, b, c, d, e = coefficients\n",
    "    return a * x**4 + b * x**3 + c * x**2 + d * x + e\n",
    "\n",
    "def df(x, coefficients):\n",
    "    \"\"\"\n",
    "    Function to evaluate the derivative of the quartic equation f'(x)\n",
    "    \"\"\"\n",
    "    a, b, c, d, _ = coefficients\n",
    "    return 4 * a * x**3 + 3 * b * x**2 + 2 * c * x + d\n",
    "\n",
    "def newton_raphson(coefficients, x0, tolerance=1e-6, max_iterations=100):\n",
    "    \"\"\"\n",
    "    Function to find the root of the quartic equation using the Newton-Raphson method\n",
    "    \"\"\"\n",
    "    x = x0\n",
    "    iterations = 0\n",
    "\n",
    "    while iterations < max_iterations:\n",
    "        f_value = f(x, coefficients)\n",
    "        if abs(f_value) < tolerance:\n",
    "            break\n",
    "\n",
    "        df_value = df(x, coefficients)\n",
    "        if abs(df_value) < tolerance:\n",
    "            break\n",
    "\n",
    "        x = x - f_value / df_value\n",
    "        iterations += 1\n",
    "\n",
    "    return x\n",
    "\n",
    "def main():\n",
    "    print(\"Quartic Equation Solver using Newton-Raphson Method\")\n",
    "    print(\"Enter the coefficients of the quartic equation (ax^4 + bx^3 + cx^2 + dx + e):\")\n",
    "    a = float(input(\"Enter coefficient a: \"))\n",
    "    b = float(input(\"Enter coefficient b: \"))\n",
    "    c = float(input(\"Enter coefficient c: \"))\n",
    "    d = float(input(\"Enter coefficient d: \"))\n",
    "    e = float(input(\"Enter coefficient e: \"))\n",
    "\n",
    "    coefficients = (a, b, c, d, e)\n",
    "\n",
    "    x0 = float(input(\"Enter initial guess for the root: \"))\n",
    "\n",
    "    root = newton_raphson(coefficients, x0)\n",
    "    print(f\"The root of the quartic equation is approximately: {root:.6f}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "30. Write a program that calculates the BMI (Body Mass Index) and provides health recommendations based\n",
    "on the user's input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are in healthy weight range as your BMI is 18.826793499801823 ,Congratulations You are a healty person\n"
     ]
    }
   ],
   "source": [
    "weight = float(input(\"Enter Weight (In Kg) : \"))\n",
    "height = float(input(\"Enter Height (in meter) : \"))\n",
    "\n",
    "BMI = weight/(height**2)\n",
    "\n",
    "if BMI < 18.5:\n",
    "    print(f\"You are underweight as your BMI is {BMI} , You have to intake more calories\")\n",
    "\n",
    "elif 18.5 <= BMI < 25:\n",
    "    print(f\"You are in healthy weight range as your BMI is {BMI} ,Congratulations You are a healty person\")\n",
    "\n",
    "elif 25 <= BMI <= 30:\n",
    "    print(f\"You are overweight as your BMI is {BMI} , You should Exercise daily\")\n",
    "\n",
    "elif BMI > 30:\n",
    "    print(f\"You are obese as your BMI is {BMI} , You should exercise daily and avoid junk food\")\n",
    "\n",
    "else:\n",
    "    print(\"Enter Correct weight and height \")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    " Challenge Level:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 31. Create a program that validates a password based on complexity rules (length, characters, etc.).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validates a password based on complexity (High , Medium , Low , Very Low)\n",
      "Password : '@Students4PW' have 'Medium' Complexity\n"
     ]
    }
   ],
   "source": [
    "import string\n",
    "\n",
    "print(\"validates a password based on complexity (High , Medium , Low , Very Low)\")\n",
    "\n",
    "pas = input(\"Enter Password to check its complexity : \")\n",
    "\n",
    "length = len(pas)\n",
    "\n",
    "if length >=1 and any(char.isascii() for char in pas):\n",
    "    \n",
    "    if length >= 5 and any(char.isdigit() for char in pas):\n",
    "\n",
    "        if length >= 8 and any(char.isupper() for char in pas):\n",
    "\n",
    "            special = \",./<>?!@#$%^&*()_+=-{}|][:;\"\n",
    "\n",
    "            if length >= 15 and any(char in special for char in pas):\n",
    "\n",
    "                print(f\"Password : '{pas}' have 'High' Complexity\")\n",
    "\n",
    "            else:\n",
    "\n",
    "                print(f\"Password : '{pas}' have 'Medium' Complexity\")\n",
    "\n",
    "        else:\n",
    "\n",
    "            print(f\"Password : '{pas}' have 'Low' Complexity\")\n",
    "\n",
    "    else:\n",
    "\n",
    "        print(f\"Password : '{pas}' have 'Very Low' Complexity\")\n",
    "\n",
    "else:\n",
    "\n",
    "    print(\"Enter Valid Password\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 32. Develop a program that performs matrix addition and subtraction based on user input.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1st Matrix : \n",
      "[1, 2]\n",
      "[3, 4]\n",
      "\n",
      " \n",
      " 2nd Matrix : \n",
      "[9, 8]\n",
      "[7, 6]\n",
      "\n",
      " Additon \n",
      "\n",
      " Addition : \n",
      "[10, 10]\n",
      "[10, 10]\n",
      "\n",
      " Subtraction \n",
      "\n",
      " Subtraction : \n",
      "[-8, -6]\n",
      "[-4, -2]\n",
      "\n",
      " Quit \n",
      "\n"
     ]
    }
   ],
   "source": [
    "row1 = int(input(\"Enter Number of Rows for 1st Matrix : \"))\n",
    "coloumn1 = int(input(\"Enter Number of Column for 1st Matrix : \"))\n",
    "\n",
    "matrix1 = []\n",
    "for r in range(row1):\n",
    "    row=[]\n",
    "\n",
    "    for c in range(coloumn1):\n",
    "\n",
    "        element = int(input(f\"Enter Value of [{r+1}] [{c+1}] : \"))\n",
    "\n",
    "        row.append(element)\n",
    "\n",
    "    matrix1.append(row)\n",
    "\n",
    "print(\"1st Matrix : \")\n",
    "for row in matrix1:\n",
    "    print(f\"{row}\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "row2 = int(input(\"Enter Number of Rows for 2nd Matrix : \"))\n",
    "coloumn2 = int(input(\"Enter Number of Column for 2nd Matrix : \"))\n",
    "\n",
    "matrix2 = []\n",
    "for r in range(row2):\n",
    "    row=[]\n",
    "\n",
    "    for c in range(coloumn2):\n",
    "\n",
    "        element = int(input(f\"Enter Value of [{r+1}] [{c+1}] : \"))\n",
    "\n",
    "        row.append(element)\n",
    "\n",
    "    matrix2.append(row)\n",
    "\n",
    "print(\"\\n \\n 2nd Matrix : \")\n",
    "for row in matrix2:\n",
    "    print(f\"{row}\")\n",
    "\n",
    "\n",
    "if row1 == row2 and coloumn1 == coloumn2:\n",
    "\n",
    "    while True:\n",
    "        choice = int(input(\"For Addition Press1 and Substration Press2 and Quit Press3: \"))\n",
    "\n",
    "        if choice == 1:\n",
    "         \n",
    "            print(\"\\n Additon \\n\")\n",
    "\n",
    "            addition = []\n",
    "            for r in range(row1):\n",
    "                row = []\n",
    "                for c in range(coloumn1):\n",
    "                    row.append(matrix1[r][c] + matrix2[r][c])\n",
    "                addition.append(row)\n",
    "\n",
    "            print(\" Addition : \")\n",
    "\n",
    "            for row in addition:\n",
    "                print(row)\n",
    "\n",
    "        elif choice == 2:\n",
    "            \n",
    "            print(\"\\n Subtraction \\n\")\n",
    "\n",
    "            subtraction = []\n",
    "            for r in range(row1):\n",
    "                row = []\n",
    "                for c in range(coloumn1):\n",
    "                    row.append(matrix1[r][c] - matrix2[r][c])\n",
    "                subtraction.append(row)\n",
    "\n",
    "            print(\" Subtraction : \")\n",
    "            for row in subtraction:\n",
    "                print(row)\n",
    "\n",
    "        elif choice == 3:\n",
    "            print(\"\\n Quit \\n\")\n",
    "            break\n",
    "            \n",
    "\n",
    "        else:\n",
    "            print(\"Enter valid Input\")\n",
    "\n",
    "else:\n",
    "    print(\"1st and 2nd Matrix must have same number of rows and coloumns\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 33. Write a program that calculates the greatest common divisor (GCD) of two numbers using the Euclidean \n",
    "algorithm.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 34. Build a program that performs matrix multiplication using nested loops and conditional statements.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 35. Create a program that simulates a basic text-based tic-tac-toe game against the computer.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 36. Write a program that generates Fibonacci numbers up to a specified term using iterative methods.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 37. Develop a program that calculates the nth term of the Fibonacci sequence using memoization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 38. Create a program that generates a calendar for a given month and year using conditional statements.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 39. Build a program that simulates a basic text-based blackjack game against the computer.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " 40. Write a program that generates the prime factors of a given number using trial division."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
